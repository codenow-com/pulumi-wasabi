// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("wasabi");

/**
 * The access key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console.
 */
export declare const accessKey: string | undefined;
Object.defineProperty(exports, "accessKey", {
    get() {
        return __config.get("accessKey");
    },
    enumerable: true,
});

export declare const allowedAccountIds: string[] | undefined;
Object.defineProperty(exports, "allowedAccountIds", {
    get() {
        return __config.getObject<string[]>("allowedAccountIds");
    },
    enumerable: true,
});

export declare const assumeRole: outputs.config.AssumeRole | undefined;
Object.defineProperty(exports, "assumeRole", {
    get() {
        return __config.getObject<outputs.config.AssumeRole>("assumeRole");
    },
    enumerable: true,
});

export declare const endpoints: outputs.config.Endpoints[] | undefined;
Object.defineProperty(exports, "endpoints", {
    get() {
        return __config.getObject<outputs.config.Endpoints[]>("endpoints");
    },
    enumerable: true,
});

export declare const forbiddenAccountIds: string[] | undefined;
Object.defineProperty(exports, "forbiddenAccountIds", {
    get() {
        return __config.getObject<string[]>("forbiddenAccountIds");
    },
    enumerable: true,
});

/**
 * Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`
 */
export declare const insecure: boolean | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.getObject<boolean>("insecure");
    },
    enumerable: true,
});

/**
 * The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
 */
export declare const profile: string | undefined;
Object.defineProperty(exports, "profile", {
    get() {
        return __config.get("profile");
    },
    enumerable: true,
});

/**
 * The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.
 */
export declare const region: string | undefined;
Object.defineProperty(exports, "region", {
    get() {
        return __config.get("region");
    },
    enumerable: true,
});

/**
 * Set this to true to force the request to use path-style addressing, i.e., http://s3.amazonaws.com/BUCKET/KEY. By
 * default, the S3 client will use virtual hosted bucket addressing when possible (http://BUCKET.s3.amazonaws.com/KEY).
 * Specific to the Amazon S3 service.
 */
export declare const s3ForcePathStyle: boolean | undefined;
Object.defineProperty(exports, "s3ForcePathStyle", {
    get() {
        return __config.getObject<boolean>("s3ForcePathStyle");
    },
    enumerable: true,
});

/**
 * The secret key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console.
 */
export declare const secretKey: string | undefined;
Object.defineProperty(exports, "secretKey", {
    get() {
        return __config.get("secretKey");
    },
    enumerable: true,
});

/**
 * The path to the shared credentials file. If not set this defaults to ~/.aws/credentials.
 */
export declare const sharedCredentialsFile: string | undefined;
Object.defineProperty(exports, "sharedCredentialsFile", {
    get() {
        return __config.get("sharedCredentialsFile");
    },
    enumerable: true,
});

/**
 * Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS
 * available/implemented.
 */
export declare const skipCredentialsValidation: boolean | undefined;
Object.defineProperty(exports, "skipCredentialsValidation", {
    get() {
        return __config.getObject<boolean>("skipCredentialsValidation");
    },
    enumerable: true,
});

export declare const skipMetadataApiCheck: boolean | undefined;
Object.defineProperty(exports, "skipMetadataApiCheck", {
    get() {
        return __config.getObject<boolean>("skipMetadataApiCheck");
    },
    enumerable: true,
});

/**
 * Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
 */
export declare const skipRequestingAccountId: boolean | undefined;
Object.defineProperty(exports, "skipRequestingAccountId", {
    get() {
        return __config.getObject<boolean>("skipRequestingAccountId");
    },
    enumerable: true,
});

/**
 * session token. A session token is only required if you are using temporary security credentials.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

