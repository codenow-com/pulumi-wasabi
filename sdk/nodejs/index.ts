// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessKeyArgs, AccessKeyState } from "./accessKey";
export type AccessKey = import("./accessKey").AccessKey;
export const AccessKey: typeof import("./accessKey").AccessKey = null as any;
utilities.lazyLoad(exports, ["AccessKey"], () => require("./accessKey"));

export { AccountAliasArgs, AccountAliasState } from "./accountAlias";
export type AccountAlias = import("./accountAlias").AccountAlias;
export const AccountAlias: typeof import("./accountAlias").AccountAlias = null as any;
utilities.lazyLoad(exports, ["AccountAlias"], () => require("./accountAlias"));

export { AccountPasswordPolicyArgs, AccountPasswordPolicyState } from "./accountPasswordPolicy";
export type AccountPasswordPolicy = import("./accountPasswordPolicy").AccountPasswordPolicy;
export const AccountPasswordPolicy: typeof import("./accountPasswordPolicy").AccountPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["AccountPasswordPolicy"], () => require("./accountPasswordPolicy"));

export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketObjectArgs, BucketObjectState } from "./bucketObject";
export type BucketObject = import("./bucketObject").BucketObject;
export const BucketObject: typeof import("./bucketObject").BucketObject = null as any;
utilities.lazyLoad(exports, ["BucketObject"], () => require("./bucketObject"));

export { BucketPolicyArgs, BucketPolicyState } from "./bucketPolicy";
export type BucketPolicy = import("./bucketPolicy").BucketPolicy;
export const BucketPolicy: typeof import("./bucketPolicy").BucketPolicy = null as any;
utilities.lazyLoad(exports, ["BucketPolicy"], () => require("./bucketPolicy"));

export { BucketPublicAccessBlockArgs, BucketPublicAccessBlockState } from "./bucketPublicAccessBlock";
export type BucketPublicAccessBlock = import("./bucketPublicAccessBlock").BucketPublicAccessBlock;
export const BucketPublicAccessBlock: typeof import("./bucketPublicAccessBlock").BucketPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["BucketPublicAccessBlock"], () => require("./bucketPublicAccessBlock"));

export { GetAccountAliasResult } from "./getAccountAlias";
export const getAccountAlias: typeof import("./getAccountAlias").getAccountAlias = null as any;
export const getAccountAliasOutput: typeof import("./getAccountAlias").getAccountAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAlias","getAccountAliasOutput"], () => require("./getAccountAlias"));

export { GetBucketArgs, GetBucketResult, GetBucketOutputArgs } from "./getBucket";
export const getBucket: typeof import("./getBucket").getBucket = null as any;
export const getBucketOutput: typeof import("./getBucket").getBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBucket","getBucketOutput"], () => require("./getBucket"));

export { GetBucketObjectArgs, GetBucketObjectResult, GetBucketObjectOutputArgs } from "./getBucketObject";
export const getBucketObject: typeof import("./getBucketObject").getBucketObject = null as any;
export const getBucketObjectOutput: typeof import("./getBucketObject").getBucketObjectOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObject","getBucketObjectOutput"], () => require("./getBucketObject"));

export { GetBucketObjectsArgs, GetBucketObjectsResult, GetBucketObjectsOutputArgs } from "./getBucketObjects";
export const getBucketObjects: typeof import("./getBucketObjects").getBucketObjects = null as any;
export const getBucketObjectsOutput: typeof import("./getBucketObjects").getBucketObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObjects","getBucketObjectsOutput"], () => require("./getBucketObjects"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetPolicyDocumentArgs, GetPolicyDocumentResult, GetPolicyDocumentOutputArgs } from "./getPolicyDocument";
export const getPolicyDocument: typeof import("./getPolicyDocument").getPolicyDocument = null as any;
export const getPolicyDocumentOutput: typeof import("./getPolicyDocument").getPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDocument","getPolicyDocumentOutput"], () => require("./getPolicyDocument"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { GroupPolicyArgs, GroupPolicyState } from "./groupPolicy";
export type GroupPolicy = import("./groupPolicy").GroupPolicy;
export const GroupPolicy: typeof import("./groupPolicy").GroupPolicy = null as any;
utilities.lazyLoad(exports, ["GroupPolicy"], () => require("./groupPolicy"));

export { GroupPolicyAttachmentArgs, GroupPolicyAttachmentState } from "./groupPolicyAttachment";
export type GroupPolicyAttachment = import("./groupPolicyAttachment").GroupPolicyAttachment;
export const GroupPolicyAttachment: typeof import("./groupPolicyAttachment").GroupPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["GroupPolicyAttachment"], () => require("./groupPolicyAttachment"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyAttachmentArgs, PolicyAttachmentState } from "./policyAttachment";
export type PolicyAttachment = import("./policyAttachment").PolicyAttachment;
export const PolicyAttachment: typeof import("./policyAttachment").PolicyAttachment = null as any;
utilities.lazyLoad(exports, ["PolicyAttachment"], () => require("./policyAttachment"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RolePolicyArgs, RolePolicyState } from "./rolePolicy";
export type RolePolicy = import("./rolePolicy").RolePolicy;
export const RolePolicy: typeof import("./rolePolicy").RolePolicy = null as any;
utilities.lazyLoad(exports, ["RolePolicy"], () => require("./rolePolicy"));

export { RolePolicyAttachmentArgs, RolePolicyAttachmentState } from "./rolePolicyAttachment";
export type RolePolicyAttachment = import("./rolePolicyAttachment").RolePolicyAttachment;
export const RolePolicyAttachment: typeof import("./rolePolicyAttachment").RolePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["RolePolicyAttachment"], () => require("./rolePolicyAttachment"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupMembershipArgs, UserGroupMembershipState } from "./userGroupMembership";
export type UserGroupMembership = import("./userGroupMembership").UserGroupMembership;
export const UserGroupMembership: typeof import("./userGroupMembership").UserGroupMembership = null as any;
utilities.lazyLoad(exports, ["UserGroupMembership"], () => require("./userGroupMembership"));

export { UserLoginProfileArgs, UserLoginProfileState } from "./userLoginProfile";
export type UserLoginProfile = import("./userLoginProfile").UserLoginProfile;
export const UserLoginProfile: typeof import("./userLoginProfile").UserLoginProfile = null as any;
utilities.lazyLoad(exports, ["UserLoginProfile"], () => require("./userLoginProfile"));

export { UserPolicyArgs, UserPolicyState } from "./userPolicy";
export type UserPolicy = import("./userPolicy").UserPolicy;
export const UserPolicy: typeof import("./userPolicy").UserPolicy = null as any;
utilities.lazyLoad(exports, ["UserPolicy"], () => require("./userPolicy"));

export { UserPolicyAttachmentArgs, UserPolicyAttachmentState } from "./userPolicyAttachment";
export type UserPolicyAttachment = import("./userPolicyAttachment").UserPolicyAttachment;
export const UserPolicyAttachment: typeof import("./userPolicyAttachment").UserPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["UserPolicyAttachment"], () => require("./userPolicyAttachment"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "wasabi:index/accessKey:AccessKey":
                return new AccessKey(name, <any>undefined, { urn })
            case "wasabi:index/accountAlias:AccountAlias":
                return new AccountAlias(name, <any>undefined, { urn })
            case "wasabi:index/accountPasswordPolicy:AccountPasswordPolicy":
                return new AccountPasswordPolicy(name, <any>undefined, { urn })
            case "wasabi:index/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "wasabi:index/bucketObject:BucketObject":
                return new BucketObject(name, <any>undefined, { urn })
            case "wasabi:index/bucketPolicy:BucketPolicy":
                return new BucketPolicy(name, <any>undefined, { urn })
            case "wasabi:index/bucketPublicAccessBlock:BucketPublicAccessBlock":
                return new BucketPublicAccessBlock(name, <any>undefined, { urn })
            case "wasabi:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "wasabi:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "wasabi:index/groupPolicy:GroupPolicy":
                return new GroupPolicy(name, <any>undefined, { urn })
            case "wasabi:index/groupPolicyAttachment:GroupPolicyAttachment":
                return new GroupPolicyAttachment(name, <any>undefined, { urn })
            case "wasabi:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "wasabi:index/policyAttachment:PolicyAttachment":
                return new PolicyAttachment(name, <any>undefined, { urn })
            case "wasabi:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "wasabi:index/rolePolicy:RolePolicy":
                return new RolePolicy(name, <any>undefined, { urn })
            case "wasabi:index/rolePolicyAttachment:RolePolicyAttachment":
                return new RolePolicyAttachment(name, <any>undefined, { urn })
            case "wasabi:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "wasabi:index/userGroupMembership:UserGroupMembership":
                return new UserGroupMembership(name, <any>undefined, { urn })
            case "wasabi:index/userLoginProfile:UserLoginProfile":
                return new UserLoginProfile(name, <any>undefined, { urn })
            case "wasabi:index/userPolicy:UserPolicy":
                return new UserPolicy(name, <any>undefined, { urn })
            case "wasabi:index/userPolicyAttachment:UserPolicyAttachment":
                return new UserPolicyAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("wasabi", "index/accessKey", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/accountAlias", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/accountPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/bucket", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/bucketObject", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/bucketPolicy", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/bucketPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/group", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/groupPolicy", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/groupPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/policy", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/policyAttachment", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/role", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/rolePolicy", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/rolePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/user", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/userGroupMembership", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/userLoginProfile", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/userPolicy", _module)
pulumi.runtime.registerResourceModule("wasabi", "index/userPolicyAttachment", _module)
pulumi.runtime.registerResourcePackage("wasabi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:wasabi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
